---
import DatePicker from './DatePicker.astro';
---

<article class="flex flex-col items-center gap-5">
  <section>
    <DatePicker />
  </section>
  <section class="pt-2" data-weekday>
    <p class="px-2 text-2xl sm:text-4xl"></p>
    <p
      class="bg-gradient bg-clip-text px-2 pb-10 text-center text-6xl font-black tracking-tight text-transparent sm:text-8xl md:text-9xl lg:text-[10rem] xl:text-[13rem]"
    >
    </p>
  </section>
</article>
<script>
  import { Weekday, type MonthKey } from '../utils/date';
  import {
    calculateWeekday,
    getDaysInMonth,
    suggestYear,
  } from '../utils/calculateWeekday';

  const yearInput = document.querySelector(
    '[data-year-input]',
  ) as HTMLInputElement;
  const dayInput = document.querySelector(
    '[data-day-input]',
  ) as HTMLSelectElement;
  const monthInput = document.querySelector(
    '[data-month-input]',
  ) as HTMLSelectElement;
  const dropdown = document.querySelector('[data-year-dropdown]')!;
  const dropdownButtons = dropdown.querySelectorAll('button');
  const resultElement = document.querySelector(
    '[data-weekday]',
  ) as HTMLDivElement;
  const [dateParagraph, weekdayParagraph] = resultElement.querySelectorAll('p');

  const MAX_YEAR = 4000;
  const SUGGESTED_YEARS = dropdownButtons.length;

  updateUI();

  [dayInput, monthInput, yearInput].forEach((input) => {
    input.addEventListener('input', () => {
      updateUI();
    });
  });

  dropdownButtons.forEach((button) => {
    button.addEventListener('click', () => {
      yearInput.value = button.innerText;
      updateUI();
    });
  });

  yearInput.addEventListener('input', () => {
    updateDropdown();
  });

  yearInput.addEventListener('focus', () => {
    updateDropdown();
    dropdown.classList.remove('hidden');
  });

  window.addEventListener('click', (event) => {
    if (event.target !== yearInput) {
      dropdown.classList.add('hidden');
    }
  });

  function updateUI() {
    const day = Number(dayInput.value);
    const month = monthInput.value as MonthKey;
    const year = Number(yearInput.value);
    const weekday = calculateWeekday(day, month, year);

    updateDays();

    dateParagraph.innerText = `${month} ${day}, ${year} is `;
    weekdayParagraph.innerText = Weekday[weekday];
  }

  function updateDays() {
    const month = monthInput.value as MonthKey;
    const year = Number(yearInput.value);
    const daysInMonth = getDaysInMonth(month, year);
    const updatedDays = Array.from({ length: daysInMonth }, (_, i) => i + 1);
    const currentlySelectedDay = Number(dayInput.value);
    const newSelectedDay =
      updatedDays.includes(currentlySelectedDay) ? currentlySelectedDay : (
        daysInMonth
      );

    dayInput.innerHTML = updatedDays
      .map(
        (day) =>
          `<option value="${day}" ${
            day === newSelectedDay ? 'selected' : ''
          }>${day}</option>`,
      )
      .join('');
  }

  function updateDropdown() {
    const year = Number(yearInput.value);

    if (isNaN(year)) return;

    const suggestedYear = suggestYear(year, MAX_YEAR, SUGGESTED_YEARS);

    dropdownButtons.forEach((button, index) => {
      button.innerText = String(suggestedYear + index + 1);
    });
  }
</script>
